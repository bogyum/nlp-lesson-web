export interface PromptExample {
  id: number;
  title: string;
  description: string;
  prompt: string;
  difficulty: '초급' | '중급';
  category: string;
  learningObjectives: string[];
}

export const promptExamples: PromptExample[] = [
  {
    id: 1,
    title: "학생 성적 관리 시스템",
    description: "학생들의 성적을 입력받아 평균, 최고점, 최저점을 계산하고 등급을 부여하는 프로그램",
    prompt: `파이썬으로 학생 성적 관리 시스템을 만들어 줘. 
    
    요구사항:
    1. 사용자가 학생 수를 입력하면, 각 학생의 이름과 성적(0-100점)을 입력받아야 해
    2. 입력받은 성적들의 평균, 최고점, 최저점을 계산해서 출력해야 해
    3. 각 학생의 성적에 따라 등급을 부여해야 해 (90점 이상: A, 80점 이상: B, 70점 이상: C, 60점 이상: D, 60점 미만: F)
    4. 전체 학생의 등급별 분포도 출력해야 해
    5. 파일명은 student_grade_manager.py로 해줘
    
    예시 출력:
    학생 수를 입력하세요: 3
    학생 1의 이름을 입력하세요: 김철수
    김철수의 성적을 입력하세요: 85
    학생 2의 이름을 입력하세요: 이영희
    이영희의 성적을 입력하세요: 92
    학생 3의 이름을 입력하세요: 박민수
    박민수의 성적을 입력하세요: 78
    
    === 성적 분석 결과 ===
    평균: 85.0점
    최고점: 92점 (이영희)
    최저점: 78점 (박민수)
    
    === 등급별 분포 ===
    A등급: 1명
    B등급: 1명
    C등급: 1명`,
    difficulty: '초급',
    category: '데이터 관리',
    learningObjectives: [
      '리스트와 딕셔너리 활용',
      '반복문과 조건문 조합',
      '함수 정의 및 활용',
      '데이터 분석 기초'
    ]
  },
  {
    id: 2,
    title: "간단한 은행 계좌 관리 시스템",
    description: "계좌 생성, 입금, 출금, 잔액 조회 기능을 가진 은행 시스템",
    prompt: `파이썬으로 간단한 은행 계좌 관리 시스템을 만들어 줘.
    
    요구사항:
    1. 계좌 클래스(Account)를 만들어야 해
    2. 계좌 생성 시 계좌번호(자동 생성), 소유자명, 초기 잔액을 설정해야 해
    3. 입금(deposit), 출금(withdraw), 잔액 조회(balance) 메서드가 있어야 해
    4. 출금 시 잔액이 부족하면 "잔액이 부족합니다" 메시지를 출력해야 해
    5. 계좌 정보 출력 메서드도 있어야 해
    6. 메인 프로그램에서는 계좌를 생성하고 입출금을 테스트할 수 있어야 해
    7. 파일명은 bank_account.py로 해줘
    
    예시 출력:
    === 계좌 생성 ===
    계좌번호: 1001
    소유자: 홍길동
    초기 잔액: 10000원
    
    === 입금 ===
    5000원 입금
    현재 잔액: 15000원
    
    === 출금 ===
    3000원 출금
    현재 잔액: 12000원
    
    === 출금 실패 ===
    20000원 출금 시도
    잔액이 부족합니다`,
    difficulty: '중급',
    category: '객체지향 프로그래밍',
    learningObjectives: [
      '클래스와 객체 개념 이해',
      '메서드 정의 및 활용',
      '예외 처리 기초',
      '객체지향 프로그래밍 패턴'
    ]
  },
  {
    id: 3,
    title: "단어 빈도 분석기",
    description: "텍스트 파일을 읽어서 단어의 출현 빈도를 분석하는 프로그램",
    prompt: `파이썬으로 텍스트 파일의 단어 빈도를 분석하는 프로그램을 만들어 줘.
    
    요구사항:
    1. 텍스트 파일을 읽어서 단어들을 추출해야 해
    2. 대소문자를 구분하지 않고, 특수문자와 숫자는 제거해야 해
    3. 각 단어의 출현 빈도를 계산해서 빈도순으로 정렬해야 해
    4. 가장 많이 나온 단어 상위 10개를 출력해야 해
    5. 전체 단어 수와 고유 단어 수도 출력해야 해
    6. 파일명은 word_frequency_analyzer.py로 해줘
    
    사용할 라이브러리: re (정규표현식)
    
    예시 출력:
    === 단어 빈도 분석 결과 ===
    전체 단어 수: 150개
    고유 단어 수: 45개
    
    === 상위 10개 단어 ===
    1. the: 15회
    2. is: 12회
    3. and: 10회
    4. of: 8회
    5. to: 7회
    6. in: 6회
    7. a: 5회
    8. that: 4회
    9. it: 4회
    10. for: 3회`,
    difficulty: '중급',
    category: '텍스트 처리',
    learningObjectives: [
      '파일 입출력 처리',
      '정규표현식 활용',
      '딕셔너리 고급 활용',
      '데이터 정렬 및 필터링'
    ]
  },
  {
    id: 4,
    title: "간단한 퀴즈 게임",
    description: "문제와 답을 입력받아 퀴즈를 진행하고 점수를 계산하는 게임",
    prompt: `파이썬으로 간단한 퀴즈 게임을 만들어 줘.
    
    요구사항:
    1. 퀴즈 문제와 답을 딕셔너리로 저장해야 해 (최소 5개 문제)
    2. 사용자에게 문제를 하나씩 제시하고 답을 입력받아야 해
    3. 정답/오답을 즉시 알려주고, 정답 시 10점을 부여해야 해
    4. 모든 문제가 끝나면 총점과 정답률을 출력해야 해
    5. 틀린 문제들을 다시 한 번 풀 수 있는 기회를 제공해야 해
    6. 파일명은 quiz_game.py로 해줘
    
    예시 출력:
    === 퀴즈 게임 시작 ===
    
    문제 1: 파이썬의 창시자는 누구인가요?
    답: Guido van Rossum
    정답입니다! +10점
    
    문제 2: 파이썬에서 리스트를 만드는 기호는 무엇인가요?
    답: []
    정답입니다! +10점
    
    === 게임 결과 ===
    총점: 40점 / 50점
    정답률: 80%
    
    === 틀린 문제 재도전 ===
    틀린 문제를 다시 풀어보세요!`,
    difficulty: '초급',
    category: '게임 개발',
    learningObjectives: [
      '딕셔너리 활용',
      '반복문과 조건문 조합',
      '점수 계산 로직',
      '사용자 입력 처리'
    ]
  },
  {
    id: 5,
    title: "간단한 계산기 (함수 활용)",
    description: "사칙연산과 추가 기능을 가진 계산기 프로그램",
    prompt: `파이썬으로 함수를 활용한 계산기 프로그램을 만들어 줘.
    
    요구사항:
    1. 덧셈, 뺄셈, 곱셈, 나눗셈 함수를 각각 만들어야 해
    2. 거듭제곱, 제곱근 계산 함수도 추가해야 해
    3. 메인 함수에서는 사용자에게 연산을 선택하게 하고, 두 숫자를 입력받아야 해
    4. 나눗셈 시 0으로 나누는 경우 예외 처리를 해야 해
    5. 계산 결과를 소수점 둘째 자리까지 출력해야 해
    6. 파일명은 calculator.py로 해줘
    
    사용할 라이브러리: math (제곱근 계산용)
    
    예시 출력:
    === 계산기 ===
    1. 덧셈
    2. 뺄셈
    3. 곱셈
    4. 나눗셈
    5. 거듭제곱
    6. 제곱근
    0. 종료
    
    연산을 선택하세요: 1
    첫 번째 숫자를 입력하세요: 10
    두 번째 숫자를 입력하세요: 5
    결과: 15.00
    
    연산을 선택하세요: 4
    첫 번째 숫자를 입력하세요: 10
    두 번째 숫자를 입력하세요: 0
    오류: 0으로 나눌 수 없습니다.`,
    difficulty: '중급',
    category: '함수 프로그래밍',
    learningObjectives: [
      '함수 정의 및 호출',
      '매개변수와 반환값',
      '예외 처리',
      '모듈 import 및 활용'
    ]
  }
];

export const getPromptExampleById = (id: number): PromptExample | undefined => {
  return promptExamples.find(example => example.id === id);
}; 